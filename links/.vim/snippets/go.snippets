# templates
snippet hello
	package main

	import (
		"fmt"
	)

	func main() {
		${0:fmt.Println("Hello World")}
	}
# file level declarations
snippet pa
	package ${0:name}
snippet im
	import (
		"${0:fmt}"
	)
snippet gh
	"github.com/jefflund/${0:pkg}"
snippet imgh
	import (
		"github.com/jefflund/${0:pkg}"
	)
snippet gmat
	"gonum.org/v1/gonum/mat"
snippet imgmat
	import (
		"gonum.org/v1/gonum/mat"
	)
snippet consts
	const (
		${1:name} = ${0:value}
	)
snippet va
	var (
		${1:name} = ${0:value}
	)
# functions
snippet main
	func main() {
		${0}
	}
snippet init
	func init() {
		${0}
	}
snippet func
	func ${1:name}(${2:args...}) ${3:ret} {
		${0}
	}
snippet proc
	func ${1:name}(${2:args...}) {
		${0}
	}
snippet rfunc
	func (${1:recevier}) ${2:name}(${3:args...}) ${4:ret} {
		${0}
	}
snippet rproc
	func (${1:recevier}) ${2:name}(${3:args...}) {
		${0}
	}
snippet con
	func New${1:Name}(${2:args}) $1 {
		return $1{${0}}
	}
snippet conp
	func New${1:Name}(${2:args}) *$1 {
		return &$1{${0}}
	}
snippet rpc
	func (${1:recevier}) ${2:name}(${3:arg}, ${4:*ret}) error {
		${0}
	}
# goroutines
snippet gof
	go func() {
		${0}
	}()
# conditionals
snippet if
	if ${1:cond} {
		${0}
	}
snippet ifa
	if ${1:var} := ${2:value}; ${3:cond} {
		${0}
	}
snippet el
	else {
		${0}
	}
snippet elif
	else if ${1:cond} {
		${0}
	}
snippet ife
	if err != nil {
		return ${1:err}
	}
snippet ifae
	if ${1:err} := ${2:value}; err != nil {
		${0}
	}
# switches
snippet sw
	switch ${1:value} {
	${0}
	}
snippet tyt
	switch ${1:t} := ${2:v}.(type) {
	case ${3:type}:
		${0}
	}
snippet ty
	switch ${1:v}.(type) {
	case ${2:type}:
		${0}
	}
snippet ma
	switch {
	${0}
	}
snippet sel
	select {
	case ${1}:
		${0}
	}
snippet ca
	case ${1}:
		${0}
# loops
snippet wh
	for ${1:cond} {
		${0}
	}
snippet fori
	for ${1:i} := 0; $1 < ${2:max}; $1++ {
		${0}
	}
snippet forx
	for ${1:x} := ${2:min}; $1 <= ${3:max}; $1++ {
		${0}
	}
snippet forr
	for ${1:x} := range ${2:vals} {
		${0}
	}
snippet forkv
	for ${1:k}, ${2:v} := range ${3:vals} {
		${0}
	}
snippet foriv
	for i, ${1:v} := range ${2:vals} {
		${0}
	}
snippet fork
	for ${1:k} := range ${2:vals} {
		${0}
	}
snippet forv
	for _, ${1:v} := range ${2:vals} {
		${0}
	}
snippet loop
	for {
		${0}
	}
# types
snippet in
	type ${1:Name} interface {
		${0}
	}
snippet st
	type ${1:Name} struct {
		${0}
	}
# data structures
snippet set
	map[${0:Key}]struct{}
snippet map
	map[${1:Key}]${0:Value}
snippet ap
	${1:slice} = append($1, ${2:val})
# testing
snippet imtest
	import (
		"testing"
	)
snippet test
	func Test${1:Name}(t *testing.T) {
		${0}
	}
snippet example
	func Example${1:Name}() {
		${0}
		// Output:
	}
snippet benchmark
	func Benchmark${1:Name}(b *testing.B) {
		${0}
	}
snippet cases
	cases := []struct{
		${1:fields}
	}{
		${2:cases}
	}
	for _, c := range cases {
		${0}
	}
snippet testm
	func TestMain(m *testing.M) {
		${0:os.Exit(m.Run())}
	}
