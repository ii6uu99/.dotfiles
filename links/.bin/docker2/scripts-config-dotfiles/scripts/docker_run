#!/bin/bash
#
# A dialog based script to run locally stored docker images
#

DIALOG=/usr/bin/dialog

DIALOG_OK=0					#
DIALOG_CANCEL=1					#
DIALOG_HELP=2					# Possible dialog return values
DIALOG_EXTRA=3					# for $?
DIALOG_ITEM_HELP=4				#
DIALOG_ESC=255					#

SIG_NONE=0					#
SIG_HUP=1					#
SIG_INT=2					# System signals for trap
SIG_QUIT=3					#
SIG_KILL=9					#
SIG_TERM=15					#

declare -a IMG_REPO=( $(docker images |awk '{printf "%s ", $1}') )
declare -a IMG_TAG=( $(docker images |awk '{printf "%s ", $2}') )
declare -a IMG_ID=( $(docker images |awk '{printf "%s ", $3}') )
declare -a IMAGE
_backtitle="dialog based Docker images launcher by boret"
tempfile=/tmp/test$$
INPUT_F=/tmp/test_$$

#############################################################################
#				Trap signals				    #
#############################################################################
#trap "set +x; sleep 1; set -x" DEBUG

trap 'rm -f $tempfile $INPUT_F' 0 "$SIG_NONE" "$SIG_HUP" "$SIG_INT" "$SIG_QUIT" "$SIG_TERM"
exec 4<>$tempfile

#############################################################################
#				Functions				    #
#############################################################################

# Utility to fill the dialog menu entries with local images
#
fill_repos()
{
	let n=1
	while [ "$n" -ne "${#IMG_ID[*]}" ]; do
		echo "${IMG_ID[$n]}" "${IMG_REPO[$n]}:${IMG_TAG[$n]}"
		(( n++ ))
	done
}

# check the return code of a dialog item to abort script
# parameters $1 = return code (usually $?)
#
get_result()
{
	case $1 in
		$DIALOG_CANCEL|$DIALOG_ESC) clear
					    echo "Abortado"
					    exit 3
	esac
}

# a dialog to get data if we want to mount a volume
# fill VOLUME global variable
#
volume_form()
{
	$DIALOG --clear  --backtitle "$_backtitle" --title " Punto de montaje " \
		--form 'Selecciona el punto de montaje en la imagen y el directorio local a montar' $((_H/2)) $((_W/2)) 3 \
"Punto de montaje: "	1 1	/mnt/data	1 21 250 0 \
"Carpeta local: "	2 1	/home/boret/src	2 21 250 0 \
"Opciones de montaje:"	3 1	rw		3 21 250 0 \
2> $tempfile

	get_result $?

	VOLUME="-v $(cut -d'
' -f2 $tempfile):$(cut -d'
' -f1 $tempfile):$(cut -d'
' -f3 $tempfile)"
}

# a dialog to get the desired name of a container
# sets a global variable CON_NAME
#
name_form()
{
	$DIALOG --clear --backtitle "$_backtitle" --title " Nombre del contenedor " \
		--inputbox 'Selecciona un nombre para el contenedor' $((_H/2)) $((_W/2)) "mi_contenedor" \
		2> $tempfile

	get_result $?

	CON_NAME="$(cat $tempfile)"
}

# output to stdout the name of an image, given its sha
# parameters: $1 = image sha
#
image_name()
{
	local i=0
	while [[ $i -lt ${#IMG_ID[@]} ]]; do
		[[ $1 == "${IMG_ID[$i]}" ]] && echo "${IMG_REPO[$i]}"
		(( i++ ))
	done
}

# Source functions library
. $HOME/sbin/script-funcs.sh

#############################################################################
#                                Main body                                  #
#############################################################################
get_term_size _H _W

case $# in
	0)   $DIALOG --clear --backtitle "$_backtitle" --title " Imágenes disponibles " \
		--menu "Selecciona la imagen:" $((_H/2)) $((_W/2)) 8 \
		$(fill_repos) 2> $tempfile
	     get_result $?
	     IMAGE=( $(cat "$tempfile") )
	     ;;
        1)   IMAGE=( $1 )
	     ;;
	*)   $DIALOG --clear --backtitle "$_backtitle" --colors --title " \Zb\Zu\Z1AVISO\Zn " \
		--msgbox "\Z1Se ha solicitado más de una imagen.\Zn
Asegúrate de que la opción \Z1--detach\Zn se activa en los siguientes menús" $((_H/2)) $((_W/2))
	     IMAGE=( $@ )
	     ;;
esac
i=0
while (( i < ${#IMAGE[@]} )); do
	VOLUME=""
	CON_NAME=""
	COMMAND="docker run"
	j=0
	$DIALOG --clear --backtitle "$_backtitle" --title " Opciones para la imagen $(image_name "${IMAGE[$i]}") " \
		--checklist "" $((_H/2)) $((_W/2)) 8 \
		"privileged" " " off \
		"CAP_SYS_ADMIN" " " off \
		"name"	"Give a name to the container" off \
		"v" "Mount a volume" off \
		"d" "Detach" off \
		"i" "Interactive" on \
		"t" "Tty" on 2> $tempfile
	get_result $?

	declare -a OPTIONS=( $(cat "$tempfile") )

	while [ $j -ne ${#OPTIONS[*]} ]; do
		case ${OPTIONS[$j]} in
			privileged)	COMMAND="$COMMAND --privileged"
					;;
			CAP_SYS_ADMIN)	COMMAND="$COMMAND -e CAP_SYS_ADMIN"
					;;
			name)		name_form
					[[ ! -z $CON_NAME ]] && COMMAND="$COMMAND --name $CON_NAME"
					;;
			d)		COMMAND="$COMMAND -d"
					;;
			i)		COMMAND="$COMMAND -i"
					;;
			t)		COMMAND="$COMMAND -t"
					;;
			v)		volume_form
					COMMAND="$COMMAND $VOLUME"
					;;
		esac
		(( j++ ))
	done

	COMMAND="$COMMAND ${IMAGE[$i]}"

	$DIALOG --clear --backtitle "$_backtitle" --title " Comando " \
		--inputbox "¿Quieres ejecutar un comando remoto?
Por defecto se ejecuta un shell de bash." $((_H/2)) $((_W/2)) "/bin/bash" 2> $tempfile
	get_result $?

	COMMAND="$COMMAND $(cat $tempfile)"
	echo "Result for running container $CON_NAME" >>"$INPUT_F"
	$COMMAND >>"$INPUT_F" 2>&1
	echo "---------------------------------------------------" >>"$INPUT_F"
	unset OPTIONS COMMAND VOLUME CON_NAME
	(( i++ ))
done
$DIALOG --clear --backtitle "$_backtitle" --title " docker_run result " \
	--textbox "$INPUT_F" 0 0
